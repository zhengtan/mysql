/**
 * MySQL 支持多种数据类型，主要有数值类型、日期/时间类型和字符串类型
 * 
 */


/**
 * @desc 整数类型
 *
 * -------------+---------------+-------------------+
 * |  类型名称  |       说明    |      存储需求     |
 * -------------+---------------+-------------------+
 * | TINYINT    | 很小整数      | 1个字节           |
 * -------------+---------------+-------------------+
 * | SMALLINT   | 小的整数      | 2个字节           |
 * -------------+---------------+-------------------+
 * | MEDIUMINT  | 中等大小的整数| 3个字节           |
 * -------------+---------------+-------------------+
 * | INT        | 普通大小的整数| 4个字节           |
 * -------------+---------------+-------------------+
 * | BIGINT     | 大整数        | 8个字节           |
 * -------------+---------------+-------------------+
 *
 * 按照一个字节8 bit存储，故TINYINT 无符号数最大值为 2^8 -1 = 255，有符号 2^7 -1 = 127
 *
 * 注意：INT(11) 后面的数字11表示该数据类型显示宽度，显示宽度和数据类型的取值范围无关。
 */

CREATE TABLE `tb_emp1`
(
	`id` INT(11) primary key,
	`name` varchar(25) NOT NULL,
	`birthDay` date NOT NULL COMMENT '生日',
	`createTime` timestamp NOT NULL default current_timestamp COMMENT '创建时间，这里默认是当前时间'
);



/**
 * @desc 日期和时间类型
 *
 * YEAR | TIME | DATE | DATETIME | TIMESTAMP
 *
 * 插入时间：
 * insert into `tb_emp1` values('1998-08-08'),('19980808'),('980808'),(CURRENT_DATE()),(NOW());
 *
 * insert into `tb_emp1` values(1,'zt','1998-08-08',now());
 * 
 */


/**
 * @desc 字符串类型
 *
 * char(M) | varchar(M) | tinytext | text | mediumtext | longtext | enum | set
 */

/**
 * @desc 二进制类型
 *
 * bit(M) | binary(M) | varbinary(M) | tinyblob(M) | blob(M) | mediumblob | longblob
 */


/**
 *============选择数据类型的方法=================
 *
 * 1. 如果不需要表示小数部分，使用整数来继续宁保存数据；如果需要表示小数，使用浮点数类型；浮点类型double相对float精度高；
 *
 * 2. 当需要插入记录并同时插入当前时间时，使用timestamp很方便；
 *
 * 3. 对存储长度不大，但在检索速度上有要求的数据可以使用char类型；对于InnoDB存储引擎最好使用varchar，因为存储格式部分固定长度；
 *
 * 4. 性别字段适合 ENUM ，爱好适用 SET
 *
 * 5. blog 存储图片、音频信息；text只能存储纯文本；
 * 
 */



/**
 * @desc 比较运算符
 *
 *  = | <=>(安全等于) | <>(!=) | <= | >= | >
 * 
 * +-------------------+--------------------------------------+
 * |      运算符       |            作用                      |
 * +-------------------|--------------------------------------+
 * |      is null      |            判断一个只是否为null                     
 * +-------------------|--------------------------------------+  
 * |    is not null    |            判断一个只是否不为null                     
 * +-------------------|--------------------------------------+  
 *
 * least  在有两个或者多个参数时，返回最小值；
 *
 * greatest  在有两个或者多个参数时候，返回最大值；
 *
 * between and 判断一个只是否落在两个值之间；
 *
 * in 判断一个只是in列表的值；
 *
 * not in 判断一个值不是in列表中的值；
 *
 * like 通配符匹配；
 *
 * regexp 正则表达式匹配；
 */


/**
 * @desc is nul(isnull) 和 is not null 
 *eg:
mysql> select null is null, 10 is null,isnull(null),isnull(10),10 is not null;
+--------------+------------+--------------+------------+----------------+
| null is null | 10 is null | isnull(null) | isnull(10) | 10 is not null |
+--------------+------------+--------------+------------+----------------+
|            1 |          0 |            1 |          0 |              1 |
+--------------+------------+--------------+------------+----------------+
1 row in set (0.00 sec)
 * 
 */
select null is null, 10 is null,isnull(null),isnull(10),10 is not null;


/**
 * @desc  least 运算符号   least(v1,v2,...)
 * eg:
 mysql> select least(2,0),least(20.0,3.0,100,21),least('a','c','b'),least(5,null);
+------------+------------------------+--------------------+---------------+
| least(2,0) | least(20.0,3.0,100,21) | least('a','c','b') | least(5,null) |
+------------+------------------------+--------------------+---------------+
|          0 |                    3.0 | a                  |          NULL |
+------------+------------------------+--------------------+---------------+
1 row in set (0.00 sec)
 */
select least(2,0),least(20.0,3.0,100,21),least('a','c','b'),least(5,null);


/**
 * @desc greatest 运算符  greatest(v1,v2,...)
 * eg:
 mysql> select greatest(2,0),greatest(20.0,3.0,100,21),greatest('a','b','c'),greatest(5,null);
+---------------+---------------------------+-----------------------+------------------+
| greatest(2,0) | greatest(20.0,3.0,100,21) | greatest('a','b','c') | greatest(5,null) |
+---------------+---------------------------+-----------------------+------------------+
|             2 |                     100.0 | c                     |             NULL |
+---------------+---------------------------+-----------------------+------------------+
1 row in set (0.00 sec)
 */
select greatest(2,0),greatest(20.0,3.0,100,21),greatest('a','b','c'),greatest(5,null);

/**
 * @desc between and 运算符    expr between min and max
 * eg:
 mysql> select 4 between 4 and 6, 5 between 4 and 6, 12 between 9 and 10;
+-------------------+-------------------+---------------------+
| 4 between 4 and 6 | 5 between 4 and 6 | 12 between 9 and 10 |
+-------------------+-------------------+---------------------+
|                 1 |                 1 |                   0 |
+-------------------+-------------------+---------------------+
1 row in set (0.00 sec)
 */

select 4 between 4 and 6, 5 between 4 and 6, 12 between 9 and 10;



/**
 * @desc in和not in 运算符    
 * eg:
 mysql> select 2 in (1,3,5,'tks'), 'tks' in (1,3,5,'tks');
+--------------------+------------------------+
| 2 in (1,3,5,'tks') | 'tks' in (1,3,5,'tks') |
+--------------------+------------------------+
|                  0 |                      1 |
+--------------------+------------------------+
1 row in set, 2 warnings (0.00 sec)

mysql> select 2 not in (1,3,5,'tks'), 'tks' not in (1,3,5,'tks');
+------------------------+----------------------------+
| 2 not in (1,3,5,'tks') | 'tks' not in (1,3,5,'tks') |
+------------------------+----------------------------+
|                      1 |                          0 |
+------------------------+----------------------------+
1 row in set, 2 warnings (0.00 sec)
 */

select 2 in (1,3,5,'tks'), 'tks' in (1,3,5,'tks');

select 2 not in (1,3,5,'tks'), 'tks' not in (1,3,5,'tks');



/**
 * @desc like 运算符  expr like 匹配条件
 * 1. % 匹配任意数目的字符串，甚至包括零字符；
 * 2. _ 只能匹配一个字符；
 * eg:
mysql> select 'stud' like 'stud', 'stud' like 'stu_', 'stud' like '%d', 'stud' like 't_ _ _', 's' like null;
+--------------------+--------------------+------------------+----------------------+---------------+
| 'stud' like 'stud' | 'stud' like 'stu_' | 'stud' like '%d' | 'stud' like 't_ _ _' | 's' like null |
+--------------------+--------------------+------------------+----------------------+---------------+
|                  1 |                  1 |                1 |                    0 |          NULL |
+--------------------+--------------------+------------------+----------------------+---------------+
1 row in set (0.00 sec)
 */
select 'stud' like 'stud', 'stud' like 'stu_', 'stud' like '%d', 'stud' like 't_ _ _', 's' like null;


/**
 * @desc regexp 运算符  expr regexp 匹配条件
 * 1. ^: 匹配以该字符串后面的字符开头的字符串；
 * 2. $: 匹配以该字符串后面的字符串结尾的字符串；
 * 3. .: 匹配任意单字符串；
 * 4. [..]: 匹配在方括号内的任意字符串。eg: [abc] 匹配 a、b或c；[a-z]匹配任意字幕；[0-9]匹配任意数字；
 * 5. * 匹配零个或多个在它前面的字符。
 * eg:
 mysql> select 'ssky' regexp '^s', 'ssky' regexp 'y$', 'ssky' regexp '.sky', 'ssky' regexp '[ab]';
+--------------------+--------------------+----------------------+----------------------+
| 'ssky' regexp '^s' | 'ssky' regexp 'y$' | 'ssky' regexp '.sky' | 'ssky' regexp '[ab]' |
+--------------------+--------------------+----------------------+----------------------+
|                  1 |                  1 |                    1 |                    0 |
+--------------------+--------------------+----------------------+----------------------+
1 row in set (0.00 sec)
 */
select 'ssky' regexp '^s', 'ssky' regexp 'y$', 'ssky' regexp '.sky', 'ssky' regexp '[ab]';




/**
 * @desc 逻辑运算符
 *
 * not 或者 ! | and 或者 && | or 或者 || | xor
 */

